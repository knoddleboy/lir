// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

enum IdentityProvider {
  EMAIL
}

model User {
  id               String           @id @default(cuid())
  name             String
  email            String           @unique
  emailVerified    DateTime?
  password         String
  avatar           String?
  accounts         Account?
  identityProvider IdentityProvider @default(EMAIL)
  documents        Document[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@index([email])
  @@index([emailVerified])
  @@map(name: "users")
}

model Avatar {
  avatarId String @unique
  userId   String @unique
  // base64 string
  data     String

  @@map(name: "avatars")
}

model Account {
  id           String   @id @default(cuid())
  userId       String   @unique
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "accounts")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@index([token])
  @@map(name: "verification_tokens")
}

model PasswordResetRequest {
  id        String   @id @default(cuid())
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "password_reset_request")
}

model Document {
  id        String   @id @default(cuid())
  title     String?
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId, title])
  @@map("documents")
}

// model Document {
//   id        String   @id @default(cuid())
//   title     String?
//   content   Block[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user   User   @relation(fields: [userId], references: [id])
//   userId String

//   @@index([userId, title])
//   @@map("documents")
// }

// model Block {
//   id        String   @id @default(cuid())
//   type      String
//   content   Json
//   metadata  Json
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   document   Document @relation(fields: [documentId], references: [id])
//   documentId String

//   @@map("blocks")
// }

// model Document {
//   id        String   @id @default(cuid())
//   title     String?
//   owner     User     @relation(fields: [ownerId], references: [id])
//   ownerId   String
//   content   Block[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([ownerId, title])
//   @@map("documents")
// }

// enum BlockType {
//   title
//   heading1
//   heading2
//   text
// }

// model Block {
//   id         String    @id @default(cuid())
//   document   Document  @relation(fields: [documentId], references: [id])
//   documentId String
//   type       BlockType
//   content    Json
//   nextId     String?   @unique
//   next       Block?    @relation("block_nextBlock", fields: [nextId], references: [id])
//   prev       Block?    @relation("block_nextBlock")
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt

//   @@map("blocks")
// }
